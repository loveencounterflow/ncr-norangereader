{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'NCR'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n@_input_default           = 'plain'\n# @_input_default           = 'ncr'\n# @_input_default           = 'xncr'\n#...........................................................................................................\nMultimix                  = require 'multimix006modern'\n@cloak                    = ( require './cloak' ).new()\n@_aggregate               = null\n@_ISL                     = require 'interskiplist'\n@unicode_isl              = do =>\n  R = @_ISL.new()\n  @_ISL.add_index R, 'rsg'\n  @_ISL.add_index R, 'tag'\n  @_ISL.add R, interval for interval in require '../data/unicode-9.0.0-intervals.json'\n  @_aggregate = @_ISL.aggregate.use R\n  return R\ntypes                     = require './types'\n{ isa\n  validate\n  type_of }               = types.export()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_copy_library = ( input_default = 'plain' ) ->\n  ### TAINT makeshift method until we have something better; refer to\n  `tests[ \"(v2) create derivatives of NCR (2)\" ]` for example usage ###\n  reducers =\n    fallback:    'assign'\n    fields:\n      unicode_isl: ( values ) => @_ISL.copy @unicode_isl\n  #.........................................................................................................\n  mix             = ( require 'multimix006modern' ).mix.use reducers\n  R               = mix @, { _input_default: input_default, }\n  R._aggregate    = R._ISL.aggregate.use R.unicode_isl\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\n# CLOAK\n#-----------------------------------------------------------------------------------------------------------\n@_XXX_escape_chrs                 = ( text ) => @cloak.backslashed.hide  @cloak.hide               text\n@_XXX_unescape_escape_chrs        = ( text ) => @cloak.reveal            @cloak.backslashed.reveal text\n@_XXX_remove_escaping_backslashes = ( text ) => @cloak.backslashed.remove text\n\n\n#===========================================================================================================\n# SPLIT TEXT INTO CHARACTERS\n#-----------------------------------------------------------------------------------------------------------\n@chrs_from_esc_text = ( text, settings ) ->\n  R           = []\n  parts       = text.split /// \\\\ ( [ ^ . ] ) ///\n  is_escaped  = true\n  for part in parts\n    if is_escaped = not is_escaped\n      ### almost ###\n      R.push part\n      continue\n    chrs = @chrs_from_text part, settings\n    chrs.pop() if chrs[ chrs.length - 1 ] is '\\\\'\n    R.splice R.length, 0, chrs...\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@chrs_from_text = ( text, settings ) ->\n  return [] if text.length is 0\n  #.........................................................................................................\n  switch input_mode = settings?[ 'input' ] ? @_input_default\n    when 'plain'  then splitter = @_plain_splitter\n    when 'ncr'    then splitter = @_ncr_splitter\n    when 'xncr'   then splitter = @_xncr_splitter\n    else throw new Error \"unknown input mode: #{rpr input_mode}\"\n  #.........................................................................................................\n  return ( text.split splitter ).filter ( element, idx ) -> return element.length isnt 0\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_chunk = ( csg, rsg, chrs ) ->\n  R =\n    '~isa':     'NCR/chunk'\n    'csg':      csg\n    'rsg':      rsg\n    # 'chrs':     chrs\n    'text':     chrs.join ''\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@chunks_from_text = ( text, settings ) ->\n  ### Given a `text` and `settings` (of which `csg` is irrelevant here), return a list of `NCR/chunk`\n  objects (as returned by `NCR._new_chunk`) that describes stretches of characters with codepoints in the\n  same 'range' (Unicode block).\n  ###\n  R           = []\n  return R if text.length is 0\n  last_csg    = 'u'\n  last_rsg    = null\n  chrs        = []\n  #.........................................................................................................\n  switch output_mode = settings?[ 'output' ] ? @_input_default\n    when 'plain'\n      transform_output = ( chr ) ->\n        return chr\n    when 'html'\n      transform_output = ( chr ) ->\n        return switch chr\n          when '&' then '&amp;'\n          when '<' then '&lt;'\n          when '>' then '&gt;'\n          else chr\n    else\n      throw new Error \"unknown output mode: #{rpr output_mode}\"\n  #.........................................................................................................\n  for chr in @chrs_from_text text, settings\n    description = @analyze chr, settings\n    { csg\n      rsg }     = description\n    chr         = description[ if csg is 'u' then 'chr' else 'ncr' ]\n    if rsg isnt last_rsg\n      R.push @_new_chunk last_csg, last_rsg, chrs if chrs.length > 0\n      last_csg    = csg\n      last_rsg    = rsg\n      chrs        = []\n    #.......................................................................................................\n    chrs.push transform_output chr\n  #.........................................................................................................\n  R.push @_new_chunk last_csg, last_rsg, chrs if chrs.length > 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@html_from_text = ( text, settings ) ->\n  R = []\n  #.........................................................................................................\n  input_mode  = settings?[ 'input' ] ? @_input_default\n  chunks      = @chunks_from_text text, input: input_mode, output: 'html'\n  for chunk in chunks\n    R.push \"\"\"<span class=\"#{chunk[ 'rsg' ] ? chunk[ 'csg' ]}\">#{chunk[ 'text' ]}</span>\"\"\"\n  #.........................................................................................................\n  return R.join ''\n\n#===========================================================================================================\n# CONVERTING TO CID\n#-----------------------------------------------------------------------------------------------------------\n@cid_from_chr = ( chr, settings ) ->\n  input_mode = settings?[ 'input' ] ? @_input_default\n  return ( @_chr_csg_cid_from_chr chr, input_mode )[ 2 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@csg_cid_from_chr = ( chr, settings ) ->\n  input_mode = settings?[ 'input' ] ? @_input_default\n  return ( @_chr_csg_cid_from_chr chr, input_mode )[ 1 .. ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_chr_csg_cid_from_chr = ( chr, input_mode ) ->\n  ### Given a text with one or more characters, return the first character, its CSG, and its CID (as a\n  non-negative integer). Additionally, an input mode may be given as either `plain`, `ncr`, or `xncr`.\n  ###\n  #.........................................................................................................\n  throw new Error \"unable to obtain CID from empty string\" if chr.length is 0\n  #.........................................................................................................\n  input_mode ?= 'plain'\n  switch input_mode\n    when 'plain'  then matcher = @_first_chr_matcher_plain\n    when 'ncr'    then matcher = @_first_chr_matcher_ncr\n    when 'xncr'   then matcher = @_first_chr_matcher_xncr\n    else throw new Error \"unknown input mode: #{rpr input_mode}\"\n  #.........................................................................................................\n  match     = chr.match matcher\n  throw new Error \"illegal character sequence in #{rpr chr}\" unless match?\n  first_chr = match[ 0 ]\n  #.........................................................................................................\n  switch first_chr.length\n    #.......................................................................................................\n    when 1\n      return [ first_chr, 'u', first_chr.charCodeAt 0 ]\n    #.......................................................................................................\n    when 2\n      ### thx to http://perldoc.perl.org/Encode/Unicode.html ###\n      hi  = first_chr.charCodeAt 0\n      lo  = first_chr.charCodeAt 1\n      cid = ( hi - 0xD800 ) * 0x400 + ( lo - 0xDC00 ) + 0x10000\n      return [ first_chr, 'u', cid ]\n    #.......................................................................................................\n    else\n      [ chr\n        csg\n        cid_hex\n        cid_dec ] = match\n      cid = if cid_hex? then parseInt cid_hex, 16 else parseInt cid_dec, 10\n      csg = 'u' if csg.length is 0\n      return [ first_chr, csg, cid ]\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @cid_from_ncr = ( ) ->\n\n# #-----------------------------------------------------------------------------------------------------------\n# @cid_from_xncr = ( ) ->\n\n# #-----------------------------------------------------------------------------------------------------------\n# @cid_from_fncr = ( ) ->\n\n\n#===========================================================================================================\n# CONVERTING FROM CID &c\n#-----------------------------------------------------------------------------------------------------------\n@as_csg         = ( cid_hint, O ) -> return ( @_csg_cid_from_hint cid_hint, O )[ 0 ]\n@as_cid         = ( cid_hint, O ) -> return ( @_csg_cid_from_hint cid_hint, O )[ 1 ]\n#...........................................................................................................\n@as_chr         = ( cid_hint, O ) -> return @_as_chr.apply        @, @_csg_cid_from_hint cid_hint, O\n@as_uchr        = ( cid_hint, O ) -> return @_as_uchr.apply       @, @_csg_cid_from_hint cid_hint, O\n@as_fncr        = ( cid_hint, O ) -> return @_as_fncr.apply       @, @_csg_cid_from_hint cid_hint, O\n@as_sfncr       = ( cid_hint, O ) -> return @_as_sfncr.apply      @, @_csg_cid_from_hint cid_hint, O\n@as_xncr        = ( cid_hint, O ) -> return @_as_xncr.apply       @, @_csg_cid_from_hint cid_hint, O\n@as_ncr         = ( cid_hint, O ) -> return @_as_xncr.apply       @, @_csg_cid_from_hint cid_hint, O\n@as_rsg         = ( cid_hint, O ) -> return @_as_rsg.apply        @, @_csg_cid_from_hint cid_hint, O\n@as_range_name  = ( cid_hint, O ) -> return @_as_range_name.apply @, @_csg_cid_from_hint cid_hint, O\n#...........................................................................................................\n@analyze        = ( cid_hint, O ) -> return @_analyze.apply       @, @_csg_cid_from_hint cid_hint, O\n\n#-----------------------------------------------------------------------------------------------------------\n@_analyze = ( csg, cid ) ->\n  if csg is 'u'\n    chr         = @_unicode_chr_from_cid cid\n    ncr = xncr  = @_as_xncr csg, cid\n  else\n    chr         = @_as_xncr csg, cid\n    xncr        = @_as_xncr csg, cid\n    ncr         = @_as_xncr 'u', cid\n  #.........................................................................................................\n  R =\n    '~isa':     'NCR/info'\n    'chr':      chr\n    'uchr':     @_unicode_chr_from_cid cid\n    'csg':      csg\n    'cid':      cid\n    'fncr':     @_as_fncr  csg, cid\n    'sfncr':    @_as_sfncr csg, cid\n    'ncr':      ncr\n    'xncr':     xncr\n    'rsg':      @_as_rsg   csg, cid\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_chr = ( csg, cid ) ->\n  return @_unicode_chr_from_cid cid if csg is 'u'\n  return ( @_analyze csg, cid )[ 'chr' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_uchr = ( csg, cid ) ->\n  return @_unicode_chr_from_cid cid\n\n#-----------------------------------------------------------------------------------------------------------\n@_unicode_chr_from_cid = ( cid ) ->\n  return null unless 0x000000 <= cid <= 0x10ffff\n  return String.fromCodePoint cid\n  # ### thx to http://perldoc.perl.org/Encode/Unicode.html ###\n  # hi = ( Math.floor ( cid - 0x10000 ) / 0x400 ) + 0xD800\n  # lo =              ( cid - 0x10000 ) % 0x400   + 0xDC00\n  # return ( String.fromCharCode hi ) + ( String.fromCharCode lo )\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_fncr = ( csg, cid ) ->\n  rsg = ( @_as_rsg csg, cid ) ? csg\n  return \"#{rsg}-#{cid.toString 16}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_sfncr = ( csg, cid ) ->\n  return \"#{csg}-#{cid.toString 16}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_xncr = ( csg, cid ) ->\n  csg = '' if csg is 'u' or not csg?\n  return \"&#{csg}#x#{cid.toString 16};\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_rsg = ( csg, cid ) ->\n  return csg unless csg is 'u'\n  return ( @_aggregate cid )[ 'rsg' ] ? csg\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_range_name = ( csg, cid ) ->\n  return @_as_rsg csg, cid unless csg is 'u'\n  return ( @_aggregate cid )[ 'block' ] ? ( @_as_rsg csg, cid )\n\n\n#===========================================================================================================\n# ANALYZE ARGUMENTS\n#-----------------------------------------------------------------------------------------------------------\n@_csg_cid_from_hint = ( cid_hint, settings ) ->\n  ### This helper is used to derive the correct CSG and CID from arguments as accepted by the `as_*` family\n  of methods, such as `NCR.as_fncr`, `NCR.as_rsg` and so on; its output may be directly applied to the\n  respective namesake private method (`NCR._as_fncr`, `NCR._as_rsg` and so on). The method arguments should\n  obey the following rules:\n\n  * Methods may be called with one or two arguments; the first is known as the 'CID hint', the second as\n    'settings'.\n\n  * The CID hint may be a number or a text; if it is a number, it is understood as a CID; if it\n    is a text, its interpretation is subject to the `settings[ 'input' ]` setting.\n\n  * Options must be an object with the optional members `input` and `csg`.\n\n  * `settings[ 'input' ]` is *only* observed if the CID hint is a text; it governs which kinds of character\n    references are recognized in the text. `input` may be one of `plain`, `ncr`, or `xncr`; it defaults to\n    `plain` (no character references will be recognized).\n\n  * `settings[ 'csg' ]` sets the character set sigil. If `csg` is set in the settings, then it will override\n    whatever the outcome of `NCR.csg_cid_from_chr` w.r.t. CSG is—in other words, if you call\n    `NCR.as_sfncr '&jzr#xe100', input: 'xncr', csg: 'u'`, you will get `u-e100`, with the numerically\n    equivalent codepoint from the `u` (Unicode) character set.\n\n  * Before CSG and CID are returned, they will be validated for plausibility.\n\n  ###\n  #.........................................................................................................\n  switch type = type_of settings\n    when 'null', 'undefined'\n      csg_of_options  = null\n      input_mode      = null\n    when 'object'\n      csg_of_options  = settings[ 'csg' ]\n      input_mode      = settings[ 'input' ]\n    else\n      throw new Error \"expected an object as second argument, got a #{type}\"\n  #.........................................................................................................\n  switch type = type_of cid_hint\n    when 'float'\n      csg_of_cid_hint = null\n      cid             = cid_hint\n    when 'text'\n      [ csg_of_cid_hint\n        cid             ] = @csg_cid_from_chr cid_hint, input: input_mode\n    else\n      throw new Error \"expected a text or a number as first argument, got a #{type}\"\n  #.........................................................................................................\n  if csg_of_options?\n    csg = csg_of_options\n  else if csg_of_cid_hint?\n    csg = csg_of_cid_hint\n  else\n    csg = 'u'\n  #.........................................................................................................\n  # @validate_is_csg csg\n  @validate_cid csg, cid\n  return [ csg, cid, ]\n\n\n#===========================================================================================================\n# PATTERNS\n#-----------------------------------------------------------------------------------------------------------\n# G: grouped\n# O: optional\nname                      = ( /// (?:     [a-z][a-z0-9]*     ) /// ).source\n# nameG                     = ( /// (   (?: [a-z][a-z0-9]* ) | ) /// ).source\nnameO                     = ( /// (?: (?: [a-z][a-z0-9]* ) | ) /// ).source\nnameOG                    = ( /// (   (?: [a-z][a-z0-9]* ) | ) /// ).source\nhex                       = ( /// (?: x   [a-fA-F0-9]+       ) /// ).source\nhexG                      = ( /// (?: x  ([a-fA-F0-9]+)      ) /// ).source\ndec                       = ( /// (?:     [      0-9]+       ) /// ).source\ndecG                      = ( /// (?:    ([      0-9]+)      ) /// ).source\n#...........................................................................................................\n@_csg_matcher             = /// ^ #{name} $ ///\n@_ncr_matcher             = /// (?: &           \\# (?: #{hex}  | #{dec}  ) ; ) ///\n@_xncr_matcher            = /// (?: & #{nameO}  \\# (?: #{hex}  | #{dec}  ) ; ) ///\n@_ncr_csg_cid_matcher     = /// (?: & ()        \\# (?: #{hexG} | #{decG} ) ; ) ///\n@_xncr_csg_cid_matcher    = /// (?: & #{nameOG} \\# (?: #{hexG} | #{decG} ) ; ) ///\n#...........................................................................................................\n### Matchers for surrogate sequences and non-surrogate, 'ordinary' characters: ###\n@_surrogate_matcher       = /// (?: [  \\ud800-\\udbff ] [ \\udc00-\\udfff ] ) ///\n@_nonsurrogate_matcher    = ///     [^ \\ud800-\\udbff     \\udc00-\\udfff ]   ///\n#...........................................................................................................\n### Matchers for the first character of a string, in three modes (`plain`, `ncr`, `xncr`): ###\n@_first_chr_matcher_plain = /// ^ (?: #{@_surrogate_matcher.source}     |\n                                      #{@_nonsurrogate_matcher.source}    ) ///\n@_first_chr_matcher_ncr   = /// ^ (?: #{@_surrogate_matcher.source}     |\n                                      #{@_ncr_csg_cid_matcher.source}   |\n                                      #{@_nonsurrogate_matcher.source}    ) ///\n@_first_chr_matcher_xncr  = /// ^ (?: #{@_surrogate_matcher.source}     |\n                                      #{@_xncr_csg_cid_matcher.source}  |\n                                      #{@_nonsurrogate_matcher.source}    ) ///\n#...........................................................................................................\n@_plain_splitter          = /// ( #{@_surrogate_matcher.source}     |\n                                  #{@_nonsurrogate_matcher.source}    ) ///\n@_ncr_splitter            = /// ( #{@_ncr_matcher.source}           |\n                                  #{@_surrogate_matcher.source}     |\n                                  #{@_nonsurrogate_matcher.source}    ) ///\n@_xncr_splitter           = /// ( #{@_xncr_matcher.source}          |\n                                  #{@_surrogate_matcher.source}     |\n                                  #{@_nonsurrogate_matcher.source}    ) ///\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @cid_range_from_rsg = ( rsg ) ->\n#   # [ csg, ... ] = rsg.split '-'\n#   unless ( R = @_ranges_by_rsg[ rsg ] )?\n#     throw new Error \"unknown RSG: #{rpr rsg}\"\n#   return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @validate_is_csg = ( x ) ->\n#   validate.text x\n#   throw new Error \"not a valid CSG: #{rpr x}\" unless ( x.match @_csg_matcher )?\n#   throw new Error \"unknown CSG: #{rpr x}\"     unless @_names_and_ranges_by_csg[ x ]?\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@validate_cid = ( csg, cid ) ->\n  validate.float cid\n  throw new Error \"expected an integer, got #{cid}\" unless cid is Math.floor cid\n  throw new Error \"expected a positive integer, got #{cid}\" unless cid >= 0\n  if ( csg is 'u' ) and not ( 0x000000 <= cid <= 0x10ffff )\n    throw new Error \"expected an integer between 0x000000 and 0x10ffff, got 0x#{cid.toString 16}\"\n  return null\n\n\n# #===========================================================================================================\n# class @XXX_Ncr extends Multimix\n#   @include  @,  { overwrite: true, } # instance methods\n#   # @include  @,  { overwrite: false, } # instance methods\n#   # @extend   @,  { overwrite: false, } # class methods\n\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ( input_default = 'plain' ) ->\n#     super()\n#     debug '^44443^', ( k for k of @ )\n#     return undefined\n"
  ]
}